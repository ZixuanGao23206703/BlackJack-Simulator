{"ast":null,"code":"import axios from 'axios';\nimport fs from 'fs';\nimport update from 'immutability-helper';\n\n// 计算手牌总点数的函数\nconst calculateHandValue = hand => {\n  let total = 0;\n  let acesCount = 0;\n  hand.forEach(card => {\n    const values = {\n      ACE: 11,\n      KING: 10,\n      QUEEN: 10,\n      JACK: 10\n    };\n    total += values[card.value] || parseInt(card.value, 10);\n    if (card.value === 'ACE') acesCount++;\n  });\n  while (total > 21 && acesCount > 0) {\n    total -= 10;\n    acesCount--;\n  }\n  return total;\n};\n\n// 判断手牌是否为软牌的函数\nconst isSoftHand = hand => {\n  let total = 0;\n  let acesCount = 0;\n  hand.forEach(card => {\n    if (card.value === 'ACE') {\n      acesCount++;\n      total += 11;\n    } else {\n      const values = {\n        KING: 10,\n        QUEEN: 10,\n        JACK: 10\n      };\n      total += values[card.value] || parseInt(card.value, 10);\n    }\n  });\n  while (total > 21 && acesCount > 0) {\n    total -= 10;\n    acesCount--;\n  }\n  return total <= 21 && acesCount > 0;\n};\n\n// 获取手牌结果的函数\nconst getHandResult = (playerTotal, dealerTotal, handName) => {\n  if (playerTotal > 21) {\n    return `${handName} Busted!`;\n  } else if (dealerTotal > 21 || playerTotal > dealerTotal) {\n    return `${handName} Wins!`;\n  } else if (playerTotal < dealerTotal) {\n    return `Dealer Wins against ${handName}!`;\n  } else {\n    return `${handName} Ties with Dealer!`;\n  }\n};\nexport const simulategames = async numGames => {\n  const gameResults = [];\n  for (let i = 0; i < numGames; i++) {\n    // 获取新的牌堆\n    const response = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n    const deck_id = response.data.deck_id;\n\n    // 初始化手牌\n    let playerHand = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=2`)).data.cards;\n    let dealerHand = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=2`)).data.cards;\n\n    // 玩家不断抽牌直到总点数达到17或以上\n    while (calculateHandValue(playerHand) < 17) {\n      const newCard = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=1`)).data.cards[0];\n      playerHand = update(playerHand, {\n        $push: [newCard]\n      });\n    }\n\n    // 庄家不断抽牌直到总点数达到17或以上\n    while (calculateHandValue(dealerHand) < 17) {\n      const newCard = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=1`)).data.cards[0];\n      dealerHand = update(dealerHand, {\n        $push: [newCard]\n      });\n    }\n    const playerValue = calculateHandValue(playerHand);\n    const dealerValue = calculateHandValue(dealerHand);\n    const result = getHandResult(playerValue, dealerValue, 'Player');\n    gameResults.push({\n      playerHand: playerHand,\n      dealerHand: dealerHand,\n      result: result,\n      isSoft: isSoftHand(playerHand)\n    });\n  }\n\n  // 将游戏结果写入本地文件\n  fs.writeFileSync('gameData.json', JSON.stringify(gameResults, null, 2), 'utf-8');\n};","map":{"version":3,"names":["axios","fs","update","calculateHandValue","hand","total","acesCount","forEach","card","values","ACE","KING","QUEEN","JACK","value","parseInt","isSoftHand","getHandResult","playerTotal","dealerTotal","handName","simulategames","numGames","gameResults","i","response","get","deck_id","data","playerHand","cards","dealerHand","newCard","$push","playerValue","dealerValue","result","push","isSoft","writeFileSync","JSON","stringify"],"sources":["C:/BlackjackModify/src/simulategames.js"],"sourcesContent":["import axios from 'axios';\r\nimport fs from 'fs';\r\nimport update from 'immutability-helper';\r\n\r\n// 计算手牌总点数的函数\r\nconst calculateHandValue = (hand) => {\r\n  let total = 0;\r\n  let acesCount = 0;\r\n\r\n  hand.forEach(card => {\r\n    const values = {\r\n      ACE: 11,\r\n      KING: 10,\r\n      QUEEN: 10,\r\n      JACK: 10\r\n    };\r\n    total += (values[card.value] || parseInt(card.value, 10));\r\n    if (card.value === 'ACE') acesCount++;\r\n  });\r\n\r\n  while (total > 21 && acesCount > 0) {\r\n    total -= 10;\r\n    acesCount--;\r\n  }\r\n\r\n  return total;\r\n};\r\n\r\n// 判断手牌是否为软牌的函数\r\nconst isSoftHand = (hand) => {\r\n  let total = 0;\r\n  let acesCount = 0;\r\n\r\n  hand.forEach(card => {\r\n    if (card.value === 'ACE') {\r\n      acesCount++;\r\n      total += 11;\r\n    } else {\r\n      const values = {\r\n        KING: 10,\r\n        QUEEN: 10,\r\n        JACK: 10\r\n      };\r\n      total += (values[card.value] || parseInt(card.value, 10));\r\n    }\r\n  });\r\n\r\n  while (total > 21 && acesCount > 0) {\r\n    total -= 10;\r\n    acesCount--;\r\n  }\r\n\r\n  return total <= 21 && acesCount > 0;\r\n};\r\n\r\n// 获取手牌结果的函数\r\nconst getHandResult = (playerTotal, dealerTotal, handName) => {\r\n  if (playerTotal > 21) {\r\n    return `${handName} Busted!`;\r\n  } else if (dealerTotal > 21 || playerTotal > dealerTotal) {\r\n    return `${handName} Wins!`;\r\n  } else if (playerTotal < dealerTotal) {\r\n    return `Dealer Wins against ${handName}!`;\r\n  } else {\r\n    return `${handName} Ties with Dealer!`;\r\n  }\r\n};\r\n\r\nexport const simulategames = async (numGames) => {\r\n  const gameResults = [];\r\n\r\n  for (let i = 0; i < numGames; i++) {\r\n    // 获取新的牌堆\r\n    const response = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\r\n    const deck_id = response.data.deck_id;\r\n\r\n    // 初始化手牌\r\n    let playerHand = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=2`)).data.cards;\r\n    let dealerHand = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=2`)).data.cards;\r\n\r\n    // 玩家不断抽牌直到总点数达到17或以上\r\n    while (calculateHandValue(playerHand) < 17) {\r\n      const newCard = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=1`)).data.cards[0];\r\n      playerHand = update(playerHand, { $push: [newCard] });\r\n    }\r\n\r\n    // 庄家不断抽牌直到总点数达到17或以上\r\n    while (calculateHandValue(dealerHand) < 17) {\r\n      const newCard = (await axios.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=1`)).data.cards[0];\r\n      dealerHand = update(dealerHand, { $push: [newCard] });\r\n    }\r\n\r\n    const playerValue = calculateHandValue(playerHand);\r\n    const dealerValue = calculateHandValue(dealerHand);\r\n    const result = getHandResult(playerValue, dealerValue, 'Player');\r\n\r\n    gameResults.push({\r\n      playerHand: playerHand,\r\n      dealerHand: dealerHand,\r\n      result: result,\r\n      isSoft: isSoftHand(playerHand)\r\n    });\r\n  }\r\n\r\n  // 将游戏结果写入本地文件\r\n  fs.writeFileSync('gameData.json', JSON.stringify(gameResults, null, 2), 'utf-8');\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}